type Book
  @model(subscriptions: null)
  @auth(
    rules: [
      #allow admins to create, update and delete books
     { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view books
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view books
      { allow: public, operations: [read] }
    ]
  )
   {
  id: ID!
  title: String!
  description: String
  image: String
  pdfdoc: String
  author: String
  featured: Boolean
  price: Float
  orders: [BookOrder] @hasMany(fields: ["id"])
}

type BookOrder
  @model(queries: null, subscriptions: null)
  @auth(
    rules: [
      # allow admins to create bookorders for customers by using customer email in lambda
     { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  )
  {
  id: ID!
  book_id: ID! @index(name: "byBook", sortKeyFields: ["order_id"])
  order_id: ID! @index(name: "byOrder", sortKeyFields: ["book_id"])
  book: Book @belongsTo(fields: ["book_id"])
  order: Order @belongsTo(fields: ["order_id"])
}

type Order
  @model(subscriptions: null)
   @auth(
   rules: [
      # only owner can see his orders
      { allow: owner, identityClaim: "email", ownerField: "customer" }
       #allow admins to view orders
      { allow: groups, groups: ["Admin"] }
    ]
 )
  {
  id: ID!
  user: String! @index(name: "byUser")
  date: String
  total: Float
  books: [BookOrder] @hasMany(fields: ["id"])
}

input CartItem {
  id: ID!
  title: String
  image: String
  pdfdoc: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
    @function(name: "createOrder-${env}")
}

enum OrderStatus {
  SUCCESS
  FAILED
}
